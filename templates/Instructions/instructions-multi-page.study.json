{
  "components": {
    "3": {
      "id": "3",
      "type": "lab.html.Screen",
      "files": {
        "rows": []
      },
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "responses": {
        "rows": [
          [
            "",
            "",
            "",
            ""
          ]
        ]
      },
      "messageHandlers": {
        "rows": [
          [
            {
              "title": "",
              "message": "before:prepare",
              "code": "let done = false // is it the last screen?\r\n\r\nconst setVisibility = (selector, isVisible) => {\r\n  // Extract the content from the current element\r\n  const target = this.options.el.querySelector(selector)\r\n\r\n  target.style.visibility = isVisible ? 'visible' : 'hidden'\r\n}\r\n\r\nconst moveForth = (selector) => {\r\n  const target = this.options.el.querySelector(selector)\r\n  if(target.nextElementSibling){\r\n    target.classList.add(\"hidden\"); // hide current screen\r\n    target.nextElementSibling.classList.remove(\"hidden\"); //show next screen\r\n    \r\n    setVisibility('#bck', true) // make sure that 'back' button is visible\r\n\r\n    if(!target.nextElementSibling.nextElementSibling){ // if the end is reached\r\n      setVisibility('#fwd', false) // hide the forward button\r\n      setVisibility('#done', true) // show the end button\r\n      done = true\r\n    }\r\n  }\r\n}\r\n\r\nconst moveBack = (selector) => {\r\n  target = this.options.el.querySelector(selector);\r\n  if(target.previousElementSibling){ //.innerHTML !== undefined\r\n    target.classList.add(\"hidden\");  // hide current screen\r\n    target.previousElementSibling.classList.remove(\"hidden\"); // show previous screen\r\n\r\n    setVisibility('#fwd', true) // make sure that 'forward' button is visible\r\n    setVisibility('#done', false) // hide the 'done' button\r\n    done = false\r\n\r\n    if(!target.previousElementSibling.previousElementSibling){ // if the beginning is reached\r\n      setVisibility('#bck', false) // hide the back button\r\n    }\r\n  } \r\n}\r\n\r\nthis.options.events['keydown(ArrowRight)'] = function(){\r\n  moveForth(\"section[id^='page']:not(.hidden)\")\r\n  moveForth(\"h2[id^='head']:not(.hidden)\")\r\n}\r\n\r\nthis.options.events['keydown(ArrowLeft)'] = function(){\r\n  moveBack(\"section[id^='page']:not(.hidden)\")\r\n  moveBack(\"h2[id^='head']:not(.hidden)\")\r\n}\r\n\r\nthis.options.events['keypress(Space)'] = function() {\r\n    if(done)\r\n      // End instructions\r\n      this.end('done')\r\n}"
            }
          ]
        ]
      },
      "title": "Instructions",
      "content": "<header>\r\n  <h2 id=\"head1\">Header #1</h2>\r\n  <h2 id=\"head2\" class=\"hidden\">Header #2</h2>\r\n  <h2 id=\"head3\" class=\"hidden\">Header #3</h2>\r\n</header>\r\n\r\n<main class=\"content-horizontal-center content-vertical-center\">\r\n  <section id=\"page1\" class=\"w-l text-justify\">\r\n    <p>Paragraph #1</p>\r\n  </section>\r\n  <section id=\"page2\" class=\"w-l text-justify hidden\">\r\n    <p>Paragraph #2</p>\r\n  </section>\r\n  <section id=\"page3\" class=\"w-l text-justify hidden\">\r\n    <p>Paragraph #3</p>\r\n  </section>\r\n</main>\r\n\r\n<footer>\r\n  <table class=\"table-plain\">\r\n    <tr>\r\n      <td id=\"bck\" style=\"visibility: hidden\">\r\n        press the left arrow <kbd>&larr;</kbd> for the previous screen \r\n      </td>\r\n      <td id=\"done\" style=\"visibility: hidden\">\r\n        press the <kbd>space bar</kbd> to continue \r\n      </td>\r\n      <td id=\"fwd\">\r\n        press the right arrow <kbd>&rarr;</kbd> for the next screen \r\n      </td>\r\n    </tr>\r\n  </table>\r\n</footer>"
    },
    "root": {
      "id": "root",
      "title": "root",
      "type": "lab.flow.Sequence",
      "children": [
        "3"
      ],
      "parameters": {
        "rows": [
          [
            {
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        ]
      },
      "plugins": [
        {
          "type": "lab.plugins.Metadata"
        }
      ],
      "metadata": {
        "title": "",
        "description": "",
        "repository": "",
        "contributors": ""
      }
    }
  },
  "version": [
    2018,
    1,
    2
  ],
  "files": {
    "files": {
      "index.html": {
        "content": "data:text/html,%3C!doctype%20html%3E%0A%3Chtml%3E%0A%3Chead%3E%0A%20%20%3Cmeta%20charset%3D%22utf-8%22%3E%0A%20%20%3Ctitle%3EExperiment%3C%2Ftitle%3E%0A%20%20%3C!--%20viewport%20setup%20--%3E%0A%20%20%3Cmeta%20name%3D%22viewport%22%20content%3D%22width%3Ddevice-width%2C%20initial-scale%3D1%22%3E%0A%20%20%3C!--%20lab.js%20library%20and%20experiment%20code%20--%3E%0A%20%20%24%7B%20header%20%7D%0A%3C%2Fhead%3E%0A%3Cbody%3E%0A%20%20%3C!--%20If%20you'd%20rather%20have%20a%20container%20with%20a%20fixed%20width%0A%20%20%20%20%20%20%20and%20variable%20height%2C%20try%20removing%20the%20fullscreen%20class%20below%20--%3E%0A%20%20%3Cdiv%20class%3D%22container%20fullscreen%22%20data-labjs-section%3D%22main%22%3E%0A%20%20%20%20%3Cmain%20class%3D%22content-vertical-center%20content-horizontal-center%22%3E%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Ch2%3ELoading%20Experiment%3C%2Fh2%3E%0A%20%20%20%20%20%20%20%20%3Cp%3EThe%20experiment%20is%20loading%20and%20should%20start%20in%20a%20few%20seconds%3C%2Fp%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fmain%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fbody%3E%0A%3C%2Fhtml%3E%0A",
        "source": "library"
      },
      "style.css": {
        "content": "data:text/css,%2F*%20Please%20define%20your%20custom%20styles%20here%20*%2F",
        "source": "library"
      }
    },
    "bundledFiles": {
      "lib/lab.js": {
        "type": "application/javascript"
      },
      "lib/lab.js.map": {
        "type": "text/plain"
      },
      "lib/lab.fallback.js": {
        "type": "application/javascript"
      },
      "lib/lab.legacy.js": {
        "type": "application/javascript"
      },
      "lib/lab.legacy.js.map": {
        "type": "text/plain"
      },
      "lib/lab.css": {
        "type": "text/css"
      },
      "lib/loading.svg": {
        "type": "image/svg+xml"
      }
    }
  }
}
